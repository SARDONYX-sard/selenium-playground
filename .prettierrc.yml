# プリンタが折り返す行の長さを指定します。
printWidth: 128

# インデントレベルごとのスペースの数を指定します。
tabWidth: 2

# 行のインデントをスペースではなくタブで行うようにします。
useTabs: false

# 文章の最後にセミコロンを表示します。
semi: true

# ダブルクォートの代わりにシングルクォートを使用します。
singleQuote: false

# オブジェクトのプロパティが引用されるタイミングを変更します。
quoteProps: "as-needed"

# JSXでダブルクォートの代わりにシングルクォートを使用します。
# jsxSingleQuote: false

# 複数行の場合、可能な限り末尾コンマを表示します（例えば、1行の配列には末尾コンマは付きません）。
trailingComma: "all"

# オブジェクトリテラルの括弧間のスペースを表示します。
bracketSpacing: true

# 複数行のJSX要素の `>` を、次の行に単独ではなく、最終行の最後に配置します。
# (自分で閉じる要素には適用されません)。
# jsxBracketSameLine: false

# 単独の矢印関数のパラメータを括弧で囲みます。
arrowParens: "always"

# ファイルの一部分のみをフォーマットする.
# この2つのオプションは, 指定された文字オフセットで始まるコードと終わるコードを # フォーマットするために利用できます(それぞれ, 包括的, 排他的です),
# 以下の2つのオプションは、与えられた文字オフセットで始まるコードと終わるコードをフォーマットするために使用できます（それぞれ包括的および排他的）。)
# rangeStart: 0
# rangeEnd: "Infinity"
# 使用するパーサーを指定します。
# babylonパーサーもFlowパーサーも、同じJavaScriptの機能セットをサポートしています（Flowを含む）。
# Prettierは、入力ファイルのパスからパーサーを自動的に推測するので、この設定を変更する必要はありません。
# パーサー "typescript"
# 入力ファイルのパスを指定します。これは、パーサーの推論に使用されます。
filepath: "none"

# Prettierは、ファイルの先頭にプラグマと呼ばれる特別なコメントを含むファイルのみをフォーマットするように自分自身を制限することができます。
# これは、大きくてフォーマットされていないコードベースを徐々にprettierに移行するときに非常に便利です。
requirePragma: false

# Prettierは、ファイルの先頭に、そのファイルがprettierでフォーマットされたことを示す特別な@formatマーカーを挿入することができます。
# これは、--require-pragmaオプションと一緒に使うとうまくいきます。ファイルの先頭に既にdocblockがある場合、このオプションは新しいdocblockを追加します。
# このオプションは、@formatマーカーでそれに改行を追加します。
insertPragma: false

# デフォルトでは、Prettierはマークダウンテキストをそのままラップします。なぜなら、いくつかのサービスは改行を考慮したレンダラを使用しているからです。
# 例えばGitHub commentやBitBucketなどです。場合によっては、エディタやビューアでのソフトな折り返しに頼りたいこともあるでしょう。
# このオプションでは、"never"を選択することができます。
proseWrap: "preserve"

# HTMLファイルのグローバルな空白の感度を指定します, 詳しくはwhitespace-sensitive formattingを参照してください.
# https://prettier.io/blog/2018/11/07/1.15.0.html#whitespace-sensitive-formatting
htmlWhitespaceSensitivity: "strict"

# 歴史的な理由により、テキストファイルでは一般的に使用される2種類の改行コードが存在します。
endOfLine: "lf"
